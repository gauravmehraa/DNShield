-------------------------

help(np.array)
help(pd.DataFrame)
help(plt.plot)

-------------------------

def linear_regression(df, x):
    n = df.shape[0]
    df['x^2'] = df['x'] * df['x']
    df['xy'] = df['x'] * df['y']

    xbar = df['x'].mean()
    ybar = df['y'].mean()
    xsquarebar = df['x^2'].mean()
    xybar = df['xy'].mean()
    
    a1 = (xybar - (xbar * ybar)) / (xsquarebar - (xbar * xbar))
    a0 = ybar - (a1 * xbar)
    return a0 + (a1 * x)

data = [[0, 2], [1, 3], [2, 5], [3, 4], [4, 6]]
#data = [[1, 1.2], [2, 1.8], [3, 2.5], [4, 3.2], [5, 3.8], [6, 3.5]]
columns = ['x', 'y']
index = [chr(code + 65) for code in range(len(data))]

df = pd.DataFrame(data=data, columns=columns, index=index)
x = 10
y = linear_regression(df, x)
print(df)
print(f"\nValue of x: {x}")
print(f"Value of y: {y}")

Value of x: 10
Value of y: 11.200000000000003

-------------------------

import matplotlib.pyplot as plt

x = [1, 2, 3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
y = [100, 90, 80, 60, 60, 55, 60, 65, 70, 70, 75, 76, 78, 79, 90, 99, 99, 100, 98, 99, 101, 102, 105, 80, 98, 99]

plt.scatter(x, y)
plt.show()

-------------------------

model = np.poly1d(np.polyfit(x, y, 3))
line = np.linspace(1, 21)

plt.scatter(x, y)
plt.plot(line, model(line))
plt.show()

-------------------------

from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn import linear_model

df = pd.read_csv('Position_Salaries.csv')
x = df.drop(["Position", "Salary"], axis = 1)
y = df["Salary"]

plt.scatter(x, y, label = "Distribution")
plt.xlabel("Level")
plt.ylabel("Salary")
plt.show()
poly = PolynomialFeatures(degree = 3)
x_poly = poly.fit_transform(x)
x_train, x_test, y_train, y_test = train_test_split(x_poly, y, test_size = 0.1)

model = linear_model.LinearRegression()
model = model.fit(x_train, y_train)
y_prediction = model.predict(x_poly)

plt.scatter(x, y, label = "Linear Distribution", color = "navy")
plt.plot(x, y_prediction, label = "Polynomial Regression", color = "orange", linewidth = 4)
plt.legend()
plt.show()
test = np.array([[2]])
model.predict(poly.fit_transform(test))

-------------------------

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

age = np.array([25, 30, 45, 35, 22, 23, 43, 36, 29, 50,  31, 38, 33, 27, 40, 42, 48, 39, 26, 34])
income = np.array([50000, 60000, 80000, 75000, 48000, 52000,  79000, 72000, 61000, 90000, 65000, 68000, 70000, 58000, 77000, 81000, 85000, 73000, 54000, 69000])
bought = np.array([0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1])

x = np.column_stack((age, income))
y = bought  

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42, stratify=y)

clf = DecisionTreeClassifier(max_depth=3, random_state=42, criterion='entropy')
clf.fit(x_train, y_train)
y_prediction = clf.predict(x_test)
accuracy = accuracy_score(y_test, y_prediction)
print(f"Accuracy: {accuracy:.2f}")

print("\nClassification Report:")
print(classification_report(y_test, y_prediction, target_names=['No', 'Yes']))

plt.figure(figsize=(8,4))
plot_tree(
    clf, 
    feature_names=['Age', 'Income'], 
    class_names=['No', 'Yes'],
    filled=True, 
    rounded=True,
    fontsize=12
)
plt.title('Decision Tree Structure')
plt.show()

-------------------------

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

df = pd.read_csv('titanic.csv')
df['Age'] = df['Age'].fillna(df['Age'].median())
df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])
df = df[['Survived', 'Pclass', 'Sex', 'Age', 'Fare', 'Embarked']]

le_sex = LabelEncoder()
le_embarked = LabelEncoder()
df['Sex'] = le_sex.fit_transform(df['Sex'])
df['Embarked'] = le_embarked.fit_transform(df['Embarked'])

x = df.drop('Survived', axis=1)
y = df['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

dt_classifier = DecisionTreeClassifier(random_state=42, criterion='entropy', max_depth=3)
dt_classifier.fit(X_train, y_train)
y_pred = dt_classifier.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:2f}%\n')
print('Classification Report:')
print(classification_report(y_test, y_pred))

plt.figure(figsize=(12, 8))
plot_tree(
    dt_classifier,
    feature_names=X.columns,
    class_names=['Not Survived', 'Survived'],
    filled=True,
    rounded=True,
    fontsize=10
)
plt.show()

-------------------------

print("Duplicate rows:")
print(df[df.duplicated()])

df['Date_of_Joining'] = pd.to_datetime(df['Date_of_Joining'], format='%Y-%m-%d', errors='coerce')
df.fillna({'Fees': df['Fees'].mean(), 'Age': df['Age'].median(), 'Course': df['Course'].mode()[0]}, inplace=True)

print(df.describe(include='all'))
print("Missing Values in each column:")
print(df.isnull().sum())

print("Mapping of Course to numeric codes:")
print(df[['Course', 'Course_encoded']].drop_duplicates().sort_values('Course_encoded'))

df['years_of_experience'] = (current_date - df['join_date']).dt.days / 365

-------------------------

# Pie Chart
labels = ['A', 'B', 'C', 'D']
sizes = [15, 30, 45, 10]

plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
plt.title('Pie Chart Example')
plt.axis('equal')  # Ensure the pie is drawn as a circle.
plt.show()


# Line Chart
x = np.linspace(0, 10, 100)
y = np.sin(x)

plt.plot(x, y, label='Sine Wave', color='blue', marker='o')
plt.title('Line Chart Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()


# Bar Graph
categories = ['A', 'B', 'C', 'D']
values = [10, 24, 36, 40]

plt.bar(categories, values, color='skyblue')
plt.title('Bar Graph Example')
plt.xlabel('Categories')
plt.ylabel('Values')
plt.show()


Scatter Plot:
x = np.random.rand(50)
y = np.random.rand(50)

plt.scatter(x, y, color='green', marker='x')
plt.title('Scatter Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.show()